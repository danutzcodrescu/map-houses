// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Context } from "../types";
import { Offers } from "../types";
import { House } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsGetHousesPerZipCode {
    zipCode: number;
  }

  export type GetRegionsResolver = (
    parent: {},
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Offers[] | null | Promise<Offers[] | null>;

  export type GetHousesPerZipCodeResolver = (
    parent: {},
    args: ArgsGetHousesPerZipCode,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => House[] | null | Promise<House[] | null>;

  export interface Type {
    getRegions: (
      parent: {},
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Offers[] | null | Promise<Offers[] | null>;

    getHousesPerZipCode: (
      parent: {},
      args: ArgsGetHousesPerZipCode,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => House[] | null | Promise<House[] | null>;
  }
}

export namespace OffersResolvers {
  export const defaultResolvers = {
    zipCode: (parent: Offers) => parent.zipCode,
    houses: (parent: Offers) => parent.houses
  };

  export type ZipCodeResolver = (
    parent: Offers,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type HousesResolver = (
    parent: Offers,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    zipCode: (
      parent: Offers,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    houses: (
      parent: Offers,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace HouseResolvers {
  export const defaultResolvers = {
    externalId: (parent: House) => parent.externalId,
    price: (parent: House) => parent.price,
    surface: (parent: House) => parent.surface,
    rooms: (parent: House) => parent.rooms,
    zipCode: (parent: House) => parent.zipCode
  };

  export type ExternalIdResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PriceResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type SurfaceResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type RoomsResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | null | Promise<number | null>;

  export type ZipCodeResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type UrlResolver = (
    parent: House,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    externalId: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    price: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    surface: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    rooms: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | null | Promise<number | null>;

    zipCode: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    url: (
      parent: House,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Offers: OffersResolvers.Type;
  House: HouseResolvers.Type;
}
